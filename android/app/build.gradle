apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

react {
    // ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π JS-—Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    entryFile.set(file("../../index.js"))
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

// –ß–∏—Ç–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ package.json
def getVersionFromPackageJson() {
    def packageJsonFile = file("../../package.json")
    def packageJson = new groovy.json.JsonSlurper().parseText(packageJsonFile.text)
    return packageJson.version
}

def appVersion = getVersionFromPackageJson()

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è versionCode –∏–∑ major.minor.patch
def getVersionCode(version) {
    def parts = version.tokenize('.')
    def major = parts.size() > 0 ? parts[0].toInteger() : 0
    def minor = parts.size() > 1 ? parts[1].toInteger() : 0
    def patch = parts.size() > 2 ? parts[2].toInteger() : 0
    return major * 10000 + minor * 100 + patch
}

def appVersionCode = getVersionCode(appVersion)

android {
    namespace "com.transappru"
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.transappru"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode appVersionCode
        versionName appVersion
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // ‚ö° –í–∞–∂–Ω–æ –¥–ª—è Java 17 –∏ AGP 8.x
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation(platform("com.google.firebase:firebase-bom:32.7.2"))
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-messaging")
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)

// üö´ –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–∞–Ω–¥–ª–∞ –≤ Release (–º—ã –¥–µ–ª–∞–µ–º ./bundle-release.sh —Å–∞–º–∏)
afterEvaluate {
    tasks.named("createBundleReleaseJsAndAssets").configure {
        enabled = false
    }
}
